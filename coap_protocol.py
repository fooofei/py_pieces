#coding=utf-8


import os
import sys

from ctypes import c_uint64
from ctypes import c_uint32
from ctypes import c_uint16
from ctypes import c_uint8
from ctypes import BigEndianStructure
from ctypes import sizeof
from binascii import hexlify
from binascii import unhexlify

class CoAPHdr(BigEndianStructure):
    _fields_=[
        ('version', c_uint8, 2),
        ('type', c_uint8, 2),
        ('token', c_uint8, 4),
        ('code_1', c_uint8,3),
        ('code_2', c_uint8,5),
        ('mid', c_uint16),
    ]
    _pack_= 1

    @classmethod
    def map(cls, hexStream):
        h = unhexlify(hexStream)
        a = cls.from_buffer_copy(h)
        restBytes = h[sizeof(a)::]
        return a,hexlify(restBytes)

    def __str__(self):
        r = []
        r.append('ver={}'.format(self.version))
        r.append('type={}'.format(self.type))
        r.append('token={}'.format(self.token))
        r.append('code={}.{}'.format(self.code_1, self.code_2))
        r.append('mid={}'.format(self.mid))
        return ' '.join(r)

# https://stackoverflow.com/questions/46945044/coap-how-to-understand-options
class CoAPOpt(BigEndianStructure):
    _fields_=[
        ('delta', c_uint8, 4),
        ('length', c_uint8, 4)
    ]
def parse_coap_opt(hexStream):
    h = hexStream
    b = unhexlify(hexStream)
    r = []
    hit_delta=0
    while h and not h.lower().startswith('ff'):
        opt = CoAPOpt.from_buffer_copy(b)
        b = b[sizeof(opt)::]
        type=opt.delta + hit_delta
        length = opt.length
        if opt.delta==13 :
            b = b[1::]
        elif opt.delta == 14:
            b = b[2::]
        if opt.length == 13:
            b = b[1::]
        elif opt.length == 14:
            b = b[2::]

        valueHexStream = hexlify(b[:opt.length:])
        b = b[opt.length::]
        h = hexlify(b)

        r.append('type={} length={} value={} <{}>'.format(type, length, valueHexStream,unhexlify(valueHexStream)))
        hit_delta = opt.delta
    return r, h

def parse_coapmsg(hexStream):
    coapHdr,r = CoAPHdr.map(hexStream)
    prntxt=[]
    prntxt.append('{}'.format(coapHdr))
    if coapHdr.token >0:
        prntxt.append('token={}'.format(r[:2*coapHdr.token:]))
        r = r[2*coapHdr.token::]
    # options
    ropt, r = parse_coap_opt(r)
    prntxt.extend(ropt)
    if r and r.lower().startswith('ff'):
        b = unhexlify(r)
        b = b[1::]
        prntxt.append('payload {} {}'.format(hexlify(b),b))
        r=''
    print('{} {} {}'.format(prntxt, r, unhexlify(r)))

def entry():
    parse_coapmsg('40015c27b56261736963')
    parse_coapmsg('60455c27ff4261736963205265736f75726365')

    parse_coapmsg('40010a7db56368696c64')
    parse_coapmsg('60450a7d')

    # 发送不存在内容
    parse_coapmsg('4001370ab46e756c6c')
    parse_coapmsg('6084370a')

    # 大块传输
    parse_coapmsg('40013d15b3626967')
    parse_coapmsg('60453d15d10a0eff4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475'
                  '722061646970697363696e6720656c69742e204372617320736f6c6c696369747564696e206665726d656e74756'
                  'd206f726e6172652e204372617320616363756d73616e2074656c6c7573207175697320647569206c6163696e696'
                  '120656c656966656e642e2050726f696e20756c7472696365732072757472756d206f726369207669746165206c75'
                  '637475732e204e756c6c616d206d616c657375616461207072657469756d20656c69742c20617420616c6971756'
                  '16d206f64696f207665686963756c6120696e2e20457469616d206e6563206d6178696d757320656c69742e2'
                  '0457469616d2061742065726174206163206578206f726e61726520666575676961742e20437572616269747'
                  '57220736564206d616c657375616461206f7263692c20696420616c6971756574206e756e632e2050686173'
                  '656c6c7573206e6563206c656f206c75637475732c20626c616e646974206c6f72656d2073697420616d65'
                  '742c20696e74657264756d206d657475732e20447569732065666669636974757220766f6c7574706174206'
                  'd61676e612c20616320756c74726963696573206e69626820616c69717565742073697420616d65742e2'
                  '0457469616d2074656d706f72206567657374617320617567756520696e2068656e6472657269742e204e'
                  '756e63206567657420617567756520756c747269636965732c206469676e697373696d206c6163757320'
                  '65742c2076756c70757461746520646f6c6f722e204e756c6c612065726f73206f64696f2c20667269'
                  '6e67696c6c612076656c206d617373612075742c20666163696c6973697320637572737573207175'
                  '616d2e204675736365206661756369627573206c6f626f7274697320636f6e6775652e20467573'
                  '636520636f6e736563746574757220706f727461206e657175652c20696420736f6c6c6963697475'
                  '64696e2076656c6974206d6178696d75732065752e20536564207068617265747261206c656f20717'
                  '5616d2c2076656c2066696e6962757320747572706973206375727375732061632e2041656e65616e2'
                  '06163206e697369206d617373612e204372617320636f6d6d6f646f2061726375206e656320616e7465'
                  '2074726973746971756520756c6c616d636f727065722e20517569737175652065752068656e6472'
                  '657269742075726e612e2043726173206672696e67696c6c612065726f73207574206e756e63206d'
                  '6178696d75732c206e6f6e20706f727461206e69736c206d6f6c6c69732e20416c697175616d2069'
                  '6e2072757472756d206d617373612e205072616573656e7420747269737469717565207475727069'
                  '73206475692c20617420756c747269')
    parse_coapmsg('40013d16b3626967c116')
    parse_coapmsg('60453d16d10a16ff63696573206c6f72656d206665726d656e74756d2061742e20566976616d75732073697420616d'
                  '6574206f726e617265206e657175652c206120696d70657264696574206e69736c2e205175697371756520612069616'
                  '3756c6973206c696265726f2c2069642074656d707573206c616375732e2041656e65616e20636f6e76616c6c6'
                  '97320657374206e6f6e206a7573746f20636f6e73656374657475722c20612068656e64726572697420656e6'
                  '96d20636f6e7365717561742e20496e20616363756d73616e20616e746520612065676573746173206c75637'
                  '475732e20457469616d2071756973206e65717565206e65632065726f7320766573746962756c756d2066617'
                  '563696275732e204e756e63207669766572726120697073756d206c65637475732c2076656c207363656c657'
                  '26973717565206475692064696374756d20612e205574206f72636920656e696d2c20756c7472696365'
                  '73206120756c747269636573206e65632c20706861726574726120696e207175616d2e20446f6e65632'
                  '0616363756d73616e2073697420616d65742065726f732065676574206665726d656e74756d2e566976'
                  '616d7573207574206f64696f206163206f64696f206d616c65737561646120616363756d73616e2e204'
                  '1656e65616e207665686963756c61206469616d2061742074656d707573206f726e6172652e20506861'
                  '73656c6c75732064696374756d206d61757269732061206d6920636f6e7365717561742c20766974616'
                  '5206d6174746973206e756c6c61206672696e67696c6c612e205574206c616f726565742074656c6c75'
                  '7320696e206e69736c206566666963697475722c2061206c7563747573206a7573746f2074656d70757'
                  '32e2046757363652066696e69627573206c696265726f20656765742076656c69742066696e69627573'
                  '20696163756c69732e204d6f7262692072686f6e6375732070757275732076656c20766573746962756'
                  'c756d20756c6c616d636f727065722e20536564206163206d6574757320696e2075726e61206665726d'
                  '656e74756d20666575676961742e204e756c6c61206e756e63206469616d2c20736f64616c657320616'
                  'c697175616d206d692069642c2076617269757320706f727461206e69736c2e205072616573656e7420'
                  '76656c206e696268206163207475727069732072757472756d206c616f72656574206174206e6f6e206'
                  'f64696f2e2050686173656c6c757320757420706f7375657265206d692e2053757370656e6469737365'
                  '206d616c6573756164612076656c6974206e6563206d617572697320636f6e76616c6c697320706f727'
                  '4612e20566976616d75732073656420756c7472696365732073617069656e2c20617420637261732061'
                  '6d65742e')

if __name__ == '__main__':
    entry()
